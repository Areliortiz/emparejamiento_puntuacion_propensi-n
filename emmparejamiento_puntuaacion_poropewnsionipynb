{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO5/mYqJIyn0Ol1bps5EMzN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Areliortiz/emparejamiento_puntuacion_propensi-n/blob/main/emmparejamiento_puntuaacion_poropewnsionipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "7H3p6kP53FBA",
        "outputId": "19825e68-ea59-4318-ed3d-5c4b9ea4e63d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                    school   tot   min   dis  stw\n",
              "0                SKANEATELES MIDDLE SCHOOL   380  0.03  0.00    0\n",
              "1             MARCUS WHITMAN MIDDLE SCHOOL   276  0.04  0.00    0\n",
              "2            BLIND BROOK-RYE MIDDLE SCHOOL   376  0.09  0.00    0\n",
              "3                 BRONXVILLE MIDDLE SCHOOL   404  0.11  0.00    0\n",
              "4                 BRIARCLIFF MIDDLE SCHOOL   374  0.12  0.00    0\n",
              "..                                     ...   ...   ...   ...  ...\n",
              "579         A A KINGSTON MIDDLE SCHOOL-STW   359  0.06  0.30    1\n",
              "580  MORAVIA JUNIOR-SENIOR HIGH SCHOOL-STW   505  0.03  0.36    1\n",
              "581          GLENS FALLS MIDDLE SCHOOL-STW   606  0.13  0.47    1\n",
              "582        LONGWOOD JUNIOR HIGH SCHOOL-STW  1369  0.48  0.50    1\n",
              "583              PIONEER MIDDLE SCHOOL-STW   765  0.03  0.51    1\n",
              "\n",
              "[584 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-470c022d-7e3a-48ab-89d2-8b0f0a605324\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>school</th>\n",
              "      <th>tot</th>\n",
              "      <th>min</th>\n",
              "      <th>dis</th>\n",
              "      <th>stw</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>SKANEATELES MIDDLE SCHOOL</td>\n",
              "      <td>380</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>MARCUS WHITMAN MIDDLE SCHOOL</td>\n",
              "      <td>276</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BLIND BROOK-RYE MIDDLE SCHOOL</td>\n",
              "      <td>376</td>\n",
              "      <td>0.09</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>BRONXVILLE MIDDLE SCHOOL</td>\n",
              "      <td>404</td>\n",
              "      <td>0.11</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>BRIARCLIFF MIDDLE SCHOOL</td>\n",
              "      <td>374</td>\n",
              "      <td>0.12</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>579</th>\n",
              "      <td>A A KINGSTON MIDDLE SCHOOL-STW</td>\n",
              "      <td>359</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>580</th>\n",
              "      <td>MORAVIA JUNIOR-SENIOR HIGH SCHOOL-STW</td>\n",
              "      <td>505</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.36</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>581</th>\n",
              "      <td>GLENS FALLS MIDDLE SCHOOL-STW</td>\n",
              "      <td>606</td>\n",
              "      <td>0.13</td>\n",
              "      <td>0.47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>582</th>\n",
              "      <td>LONGWOOD JUNIOR HIGH SCHOOL-STW</td>\n",
              "      <td>1369</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>583</th>\n",
              "      <td>PIONEER MIDDLE SCHOOL-STW</td>\n",
              "      <td>765</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.51</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>584 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-470c022d-7e3a-48ab-89d2-8b0f0a605324')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-470c022d-7e3a-48ab-89d2-8b0f0a605324 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-470c022d-7e3a-48ab-89d2-8b0f0a605324');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e04309f4-1a2d-4952-a3b4-da269e6b95ea\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e04309f4-1a2d-4952-a3b4-da269e6b95ea')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e04309f4-1a2d-4952-a3b4-da269e6b95ea button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fcbf631c-af2f-49b6-b592-483bbe39ad9d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mydata')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fcbf631c-af2f-49b6-b592-483bbe39ad9d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('mydata');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mydata",
              "summary": "{\n  \"name\": \"mydata\",\n  \"rows\": 584,\n  \"fields\": [\n    {\n      \"column\": \"school\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 584,\n        \"samples\": [\n          \"SPENCER-VAN ETTEN MIDDLE SCHOOL\",\n          \"SOUTH SENECA MIDDLE/HIGH SCHOOL\",\n          \"OAKDALE-BOHEMIA MIDDLE SCHOOL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tot\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 336,\n        \"min\": 18,\n        \"max\": 2621,\n        \"num_unique_values\": 433,\n        \"samples\": [\n          1101,\n          1888,\n          343\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29645236473736836,\n        \"min\": 0.01,\n        \"max\": 1.0,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.18,\n          0.03,\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2504425645222592,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 97,\n        \"samples\": [\n          0.62,\n          0.4,\n          0.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# Paso 1: Importar las bibliotecas necesarias\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "import matplotlib.pyplot as plt\n",
        "from statsmodels.api import Logit\n",
        "\n",
        "# Paso 2: Cargar el archivo CSV\n",
        "mydata = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQ71BwI_10C3K-Kfx3AR49_aJ5D36aIAGF4Hnxisco-q9EqLxTo6JWu9dnetspG1Z_Md1rV34HZ8a5H/pub?output=csv')\n",
        "mydata\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Modelo logÃ­stico para calcular propensity scores\n",
        "logit_model = Logit(mydata['stw'], mydata[['tot', 'min', 'dis']])\n",
        "propensity_scores = logit_model.fit().predict()\n",
        "mydata['propensity_score'] = propensity_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "udUAhx6l6ZSy",
        "outputId": "d8ce1c45-e69f-4c16-fc68-714bc35bd4a9"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.165739\n",
            "         Iterations 9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "treated = mydata[mydata['stw'] == 1]\n",
        "control = mydata[mydata['stw'] == 0]\n",
        "\n",
        "nn = NearestNeighbors(n_neighbors=1)\n",
        "nn.fit(control[['propensity_score']])\n",
        "\n",
        "# Encontrar vecinos mÃ¡s cercanos\n",
        "distances, indices = nn.kneighbors(treated[['propensity_score']])\n",
        "matched_controls = control.iloc[indices.flatten()].reset_index(drop=True)\n",
        "\n",
        "# Combinar datos tratados con sus controles emparejados\n",
        "matched_data = pd.concat([treated.reset_index(drop=True), matched_controls], axis=0)\n"
      ],
      "metadata": {
        "id": "8wrmx99u0gj_"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-BHG8RNY7yrt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def summarize_balance(data, treated_col, covariates):\n",
        "    \"\"\"Generar un resumen de balance para los datos.\"\"\"\n",
        "    summary = {}\n",
        "    for covariate in covariates:\n",
        "        treated_mean = data[data[treated_col] == 1][covariate].mean()\n",
        "        control_mean = data[data[treated_col] == 0][covariate].mean()\n",
        "        treated_sd = data[data[treated_col] == 1][covariate].std()\n",
        "        control_sd = data[data[treated_col] == 0][covariate].std()\n",
        "        treated_meadian = data[data[treated_col] == 1][covariate].median()\n",
        "        control_meadian = data[data[treated_col] == 0][covariate].median()\n",
        "        mean_diff = treated_mean - control_mean\n",
        "        eQQ_med = treated_meadian - control_meadian\n",
        "        summary[covariate] = {\n",
        "            'Treated Mean': treated_mean,\n",
        "            'Control Mean': control_mean,\n",
        "            #'Treated SD': treated_sd,\n",
        "            'Control SD': control_sd,\n",
        "            'Mean Diff': mean_diff,\n",
        "            'eQQ Med': eQQ_med\n",
        "        }\n",
        "    return pd.DataFrame(summary).T\n",
        "\n",
        "# Variables a analizar\n",
        "covariates = ['tot', 'min', 'dis'] #, 'propensity_score'\n",
        "\n",
        "# Resumen antes del emparejamiento\n",
        "balance_before = summarize_balance(mydata, 'stw', covariates)\n",
        "print(\"Balance antes del emparejamiento:\")\n",
        "print(balance_before)\n",
        "\n",
        "# Resumen despuÃ©s del emparejamiento\n",
        "balance_after = summarize_balance(matched_data, 'stw', covariates)\n",
        "print(\"\\nBalance despuÃ©s del emparejamiento:\")\n",
        "print(balance_after)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sc_Vvpx_6pn0",
        "outputId": "9112b683-4d88-4ae7-acb2-8e866c01dc0d"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balance antes del emparejamiento:\n",
            "     Treated Mean  Control Mean  Control SD   Mean Diff  eQQ Med\n",
            "tot      832.6400    568.899821  333.674606  263.740179   253.00\n",
            "min        0.1664      0.276673    0.301121   -0.110273    -0.02\n",
            "dis        0.1840      0.407889    0.249954   -0.223889    -0.25\n",
            "\n",
            "Balance despuÃ©s del emparejamiento:\n",
            "     Treated Mean  Control Mean  Control SD  Mean Diff  eQQ Med\n",
            "tot      832.6400      683.2400  351.475850    149.400    70.00\n",
            "min        0.1664        0.1684    0.123682     -0.002    -0.01\n",
            "dis        0.1840        0.1900    0.138022     -0.006    -0.01\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Supongamos que tienes tus datos cargados en un DataFrame llamado mydata\n",
        "# Las columnas relevantes son 'stw', 'tot', 'min', 'dis'\n",
        "\n",
        "# Dividir los datos en grupos tratado y control\n",
        "treated = mydata[mydata['stw'] == 1]\n",
        "control = mydata[mydata['stw'] == 0]\n",
        "\n",
        "# FunciÃ³n para calcular eQQ Median, eQQ Mean, y eQQ Max\n",
        "def calculate_eQQ(treated_values, control_values):\n",
        "    # Cuantiles del grupo tratado y control\n",
        "    quantiles = np.linspace(0, 1, 101)  # Cuantiles de 0% a 100%\n",
        "    treated_quantiles = np.quantile(treated_values, quantiles)\n",
        "    control_quantiles = np.quantile(control_values, quantiles)\n",
        "\n",
        "    # Diferencias absolutas entre cuantiles\n",
        "    differences = np.abs(treated_quantiles - control_quantiles)\n",
        "\n",
        "    # MÃ©tricas eQQ\n",
        "    eqq_median = np.median(differences)\n",
        "    eqq_mean = np.mean(differences)\n",
        "    eqq_max = np.max(differences)\n",
        "\n",
        "    return eqq_median, eqq_mean, eqq_max\n",
        "\n",
        "# Calcular las mÃ©tricas para cada variable\n",
        "variables = ['tot', 'min', 'dis']  # Variables a analizar\n",
        "results = {}\n",
        "\n",
        "for var in variables:\n",
        "    eqq_median, eqq_mean, eqq_max = calculate_eQQ(treated[var], control[var])\n",
        "    results[var] = {\n",
        "        'eQQ Median': eqq_median,\n",
        "        'eQQ Mean': eqq_mean,\n",
        "        'eQQ Max': eqq_max\n",
        "    }\n",
        "\n",
        "# Mostrar resultados\n",
        "for var, metrics in results.items():\n",
        "    print(f\"Resultados para {var}:\")\n",
        "    for metric, value in metrics.items():\n",
        "        print(f\"  {metric}: {value}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lfwh8W55C-Id",
        "outputId": "aea4f680-ad34-48c3-e793-6ffd1c781b24"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Resultados para tot:\n",
            "  eQQ Median: 290.79999999999984\n",
            "  eQQ Mean: 280.88\n",
            "  eQQ Max: 1124.0\n",
            "Resultados para min:\n",
            "  eQQ Median: 0.019999999999999997\n",
            "  eQQ Mean: 0.12445742574257428\n",
            "  eQQ Max: 0.6295999999999997\n",
            "Resultados para dis:\n",
            "  eQQ Median: 0.25\n",
            "  eQQ Mean: 0.22732277227722775\n",
            "  eQQ Max: 0.49240000000000006\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def summarize_balance(data, treated_col, covariates):\n",
        "    \"\"\"\n",
        "    Genera un resumen de balance para los datos.\n",
        "    Calcula mÃ©tricas como las medias, desviaciones estÃ¡ndar,\n",
        "    diferencias de medias y eQQ Median.\n",
        "    \"\"\"\n",
        "    summary = {}\n",
        "    for covariate in covariates:\n",
        "        # Filtrar los valores para los grupos tratado y control\n",
        "        treated_values = data[data[treated_col] == 1][covariate]\n",
        "        control_values = data[data[treated_col] == 0][covariate]\n",
        "\n",
        "        # CÃ¡lculos de las mÃ©tricas\n",
        "        treated_mean = treated_values.mean()\n",
        "        control_mean = control_values.mean()\n",
        "        treated_sd = treated_values.std()\n",
        "        control_sd = control_values.std()\n",
        "        mean_diff = treated_mean - control_mean\n",
        "\n",
        "        # CÃ¡lculo de eQQ Median\n",
        "        treated_median = treated_values.median()\n",
        "        control_median = control_values.median()\n",
        "        eqq_med = treated_median - control_median\n",
        "\n",
        "        # Guardar resultados en el resumen\n",
        "        summary[covariate] = {\n",
        "            'Treated Mean': treated_mean,\n",
        "            'Control Mean': control_mean,\n",
        "            'Control SD': control_sd,\n",
        "            'Mean Diff': mean_diff,\n",
        "            'eQQ Med': eqq_med\n",
        "        }\n",
        "\n",
        "    return pd.DataFrame(summary).T\n",
        "\n",
        "# Variables a analizar\n",
        "covariates = ['tot', 'min', 'dis']\n",
        "\n",
        "# Resumen antes del emparejamiento\n",
        "balance_before = summarize_balance(mydata, 'stw', covariates)\n",
        "print(\"Balance antes del emparejamiento:\")\n",
        "print(balance_before)\n",
        "\n",
        "# Supongamos que tienes un DataFrame llamado `matched_data` despuÃ©s del emparejamiento\n",
        "# Resumen despuÃ©s del emparejamiento\n",
        "balance_after = summarize_balance(matched_data, 'stw', covariates)\n",
        "print(\"\\nBalance despuÃ©s del emparejamiento:\")\n",
        "print(balance_after)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jR8Do8NzD8vR",
        "outputId": "ae6fcaf3-9d6d-4312-ec56-2ea69b84de1f"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balance antes del emparejamiento:\n",
            "     Treated Mean  Control Mean  Control SD   Mean Diff  eQQ Med\n",
            "tot      832.6400    568.899821  333.674606  263.740179   253.00\n",
            "min        0.1664      0.276673    0.301121   -0.110273    -0.02\n",
            "dis        0.1840      0.407889    0.249954   -0.223889    -0.25\n",
            "\n",
            "Balance despuÃ©s del emparejamiento:\n",
            "     Treated Mean  Control Mean  Control SD  Mean Diff  eQQ Med\n",
            "tot      832.6400      683.2400  351.475850    149.400    70.00\n",
            "min        0.1664        0.1684    0.123682     -0.002    -0.01\n",
            "dis        0.1840        0.1900    0.138022     -0.006    -0.01\n"
          ]
        }
      ]
    }
  ]
}